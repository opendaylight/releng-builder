{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bfa62bbd_acddb872",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 6258
      },
      "writtenOn": "2022-08-23T21:10:25Z",
      "side": 1,
      "message": "Please add a list of all the warning/errors that are being address in commit body, useful for future reference.",
      "revId": "f73f3a8df21cbbcbff20295a825ebab96d737eff",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "327ee366_4191f542",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 6731
      },
      "writtenOn": "2022-08-24T07:32:35Z",
      "side": 1,
      "message": "Hi Anil\n\nThis would mean simply listing the files fixed in this change.\nBecause apart for the common-functions.sh script and a few other issues,\nI am mostly taking a file-based approach here rather than a per-bashism one.\n\nThere are 3 reasons why I think this approach is more efficient:\n- the huge number of bashisms present in these scripts\n  (208 occurences of ${!name}), 85 of (should be \u0027b \u003d a\u0027), etc)\n- the difference of behavior when running checkbashism on a single file  \n  w/ and w/o the -f option.\n  It confirms more easily everything has been properly cleaned.\n- some bashism can be fixed separately but there is not always a unique recipe.\n  And sometimes it is simply impossible to fix a particular bashism  without considering the whole script.\n  For example there are 5 warnings at this jjb/packaging/publish-helm-charts.sh line 18 that must not be fixed separately.\nhttps://git.opendaylight.org/gerrit/c/releng/builder/+/102091/1/jjb/packaging/publish-helm-charts.sh#b18\n\nI added a dedicated tox profile to figure this out.\nYou can run these commands for more details.\n\n  $ git checkout d5726c1db36c4597159ac0bcac16d8b8718def15\n  $ tox -e checkbashisms | grep \u0027possible bashism\u0027 | cut -d\u0027 \u0027 -f7- |sort | uniq -c| sort -k1,1nr\n    208 (${!name}):\n     87 (bash arrays, ${name[0|*|@]}):\n     85 (should be \u0027b \u003d a\u0027):\n     55 (alternative test command ([[ foo ]] should be [ foo ])):\n     52 (\u0027function\u0027 is useless):\n     36 (local -opt):\n     31 (should be \u0027.\u0027, not \u0027source\u0027):\n     24 (should be VAR\u003d\"${VAR}foo\"):\n     21 (${parm,[,][pat]} or ${parm^[^][pat]}):\n     19 (${parm/?/pat[/str]}):\n     19 ((push|pop)d):\n     15 (\u0027((\u0027 should be \u0027$((\u0027):\n     11 (\u003c\u003c\u003c here string):\n      9 (\u003c() process substitution):\n      8 (mapfile):\n      6 (\u0027$((n++))\u0027 should be \u0027$n; $((n\u003dn+1))\u0027):\n      5 (${foo:3[:1]}):\n      5 ($\u0027...\u0027 should be \"$(printf \u0027...\u0027)\"):\n      5 (brace expansion):\n      5 (declare):\n      3 ($BASH_SOMETHING):\n      3 (bash arrays, H[0]):\n      2 (should be \u003eword 2\u003e\u00261):\n      1 (brace expansion, {a..b[..c]}should be $(seq a [c] b)):\n      1 (echo -e):\n      1 (function names should only contain [a-z0-9_]):\n      1 (test with unary -a (should be -e)):\n      1 (trap with ERR|DEBUG|RETURN):\n$ tox -e checkbashisms | grep \u0027possible bashism\u0027 | cut -d\u0027 \u0027 -f4|sort | uniq -c| sort -k1,1nr\n    200 ./jjb/integration/common-functions.sh\n    178 ./jjb/integration/integration-deploy-openstack-run-test.sh\n     51 ./jjb/integration/multipatch-distribution.sh\n     36 ./jjb/integration/integration-get-slave-addresses.sh\n     22 ./jjb/autorelease/compare-autorelease-projects.sh\n     18 ./jjb/packaging/openstack-k8s-config-export.sh\n     16 ./jjb/autorelease/version-bump.sh\n     15 ./jjb/autorelease/branch-cut.sh\n     12 ./jjb/autorelease/notify-build-failure.sh\n     11 ./jjb/integration/integration-compare-distributions.sh\n     11 ./jjb/integration/integration-detect-variables.sh\n     10 ./jjb/integration/integration-start-cluster-run-test.sh\n     10 ./scripts/branch_cut/branch_cutter.sh\n      9 ./jjb/integration/integration-deploy-controller-run-test.sh\n      9 ./packer/provision/baseline.sh\n      8 ./jjb/autorelease/prepare-release.sh\n      8 ./jjb/docs/docs_version_bump.sh\n      7 ./jjb/integration/integration-run-test.sh\n      6 ./jjb/integration/copy-common-functions.sh\n      5 ./jjb/copy-sandbox-logs.sh\n      5 ./jjb/docs/docs_version_bump_projects.sh\n      5 ./jjb/integration/integration-apex-run-tests.sh\n      5 ./jjb/opendaylight-infra-copy-ssh-keys.sh\n      5 ./jjb/packaging/openstack-k8s-create-with-template.sh\n      4 ./jjb/autorelease/generate-release-notes.sh\n      4 ./jjb/autorelease/update-autorelease-projects-views.sh\n      4 ./jjb/check-poms.sh\n      4 ./jjb/packaging/publish-helm-charts.sh\n      3 ./jenkins-init-scripts/local-init.sh\n      3 ./jjb/autorelease/update-validate-autorelease-projects.sh\n      3 ./jjb/integration/integration-upload-distribution.sh\n      3 ./jjb/integration/update-csit-tests.sh\n      3 ./jjb/packaging/helm-create-netrc.sh\n      3 ./jjb/packaging/openstack-k8s-cluster-delete.sh\n      3 ./jjb/packaging/openstack-k8s-deploy-helm.sh\n      2 ./jenkins-init-scripts/system_type.sh\n      2 ./jjb/autorelease/autorelease-gerrit-branch-lock.sh\n      2 ./jjb/integration/integration-configure-clustering.sh\n      2 ./jjb/netvirt/quagga-build.sh\n      2 ./jjb/opendaylight-infra-stack.sh\n      2 ./jjb/opendaylight-infra-update-image-list.sh\n      2 ./jjb/packaging/helm-repo-init.sh\n      1 ./jenkins-init-scripts/ubuntu-docker-ovs.sh\n      1 ./jjb/docs/docs-post-rtd.sh\n      1 ./jjb/generate-csit-status-report.sh\n      1 ./jjb/integration/integration-install-robotframework.sh\n      1 ./jjb/netvirt/run-reports.sh\n      1 ./scripts/rename-jobs.sh",
      "parentUuid": "bfa62bbd_acddb872",
      "revId": "f73f3a8df21cbbcbff20295a825ebab96d737eff",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    }
  ]
}