---
# TODO: Make all bash constants more readable.
# e.g.: DISTRIBUTION_BRANCH instead of DISTROBRANCH.
- parameter:
    name: integration-distribution-branch
    parameters:
      - string:
          name: DISTROBRANCH
          default: '{branch}'
          description: 'Distribution GIT branch'

- parameter:
    name: integration-bundleurl
    parameters:
      - string:
          name: BUNDLEURL
          default: '{bundleurl}'
          description: 'URL to karaf distribution zip'

- parameter:
    name: integration-jdk-version
    parameters:
      - string:
          name: JDKVERSION
          default: '{jdkversion}'
          description: 'Parameter to indicate JAVA Version'

- parameter:
    name: integration-controller-scope
    parameters:
      - string:
          name: CONTROLLERSCOPE
          default: '{controller-scope}'
          description: 'Feature Only or Feature All test'

- parameter:
    name: integration-controller-features
    parameters:
      - string:
          name: CONTROLLERFEATURES
          default: '{controller-features}'
          description: 'Features to install in the controller separated by comma'

- parameter:
    name: integration-distribution-stream
    parameters:
      - string:
          name: DISTROSTREAM
          default: '{stream}'
          description: 'Distribution stream string, for suites to know which behavior to expect'

- parameter:
    name: integration-stream-test-plan
    parameters:
      - string:
          name: STREAMTESTPLAN
          default: '{stream-test-plan}'
          description: 'Stream-specific test plan we will run'

- parameter:
    name: integration-test-plan
    parameters:
      - string:
          name: TESTPLAN
          default: '{test-plan}'
          description: 'General test plan we will run unless stream-specific one is found'

- parameter:
    name: integration-test-options
    parameters:
      - string:
          name: TESTOPTIONS
          default: '{test-options}'
          description: 'Robot command options'

- parameter:
    name: integration-distribution-git-url
    parameters:
      - string:
          name: DISTROGITURL
          default: '{git-url}/integration/distribution'
          description: 'Distribution GIT URL (do not modify)'

- parameter:
    name: integration-patch-refspec
    parameters:
      - string:
          name: PATCHREFSPEC
          default: '{branch}'
          description: 'Integration Patch Refspec'

# Macro: integration-gerrit-scm
# Operation: this macro downloads a project gerrit
# Used by: all csit jobs

- scm:
    name: integration-gerrit-scm
    scm:
      - git:
          credentials-id: 'opendaylight-jenkins-ssh'
          url: '$GIT_BASE'
          basedir: '{basedir}'
          refspec: '{refspec}'
          branches:
            - 'origin/{branch}'
          skip-tag: true
          choosing-strategy: 'gerrit'

# Macro: integration-distribution-scm
# Operation: this macro downloads the integration/distribution repo using distribution as basedir
# Used by: integration-patch-test-{stream} job template

- scm:
    name: integration-distribution-scm
    scm:
      - git:
          credentials-id: 'opendaylight-jenkins-ssh'
          basedir: 'distribution'
          url: '$DISTROGITURL'
          refspec: ''
          branches:
            - 'origin/{branch}'
          skip-tag: true

# Macro: integration-trigger-patch-submitted
# This is a single macro to use for all csit jobs who vote on every (relevant) patch set.
# Only 'recheck' trigger word is supported, it always triggers the full set of relevant jobs,
# in order to prevent Jenkins from starting only a subset and still voting Verified+1.
# Contrary to gerrit-trigger-patch-submitted, this votes +1 also on unstable runs.
# Arguments:
#     server: name of gerrit server to listen to
#     project: pattern to match triggering projects
#     branch: triggering branch name
#     files: pattern to match triggering filepaths
- trigger:
    name: integration-trigger-patch-submitted
    triggers:
      - gerrit:
          server-name: '{server}'
          trigger-on:
            - patchset-created-event:
                exclude-drafts: true
                exclude-trivial-rebase: false
                exclude-no-code-change: false
            - draft-published-event
            - comment-added-contains-event:
                comment-contains-value: recheck
          override-votes: true
          gerrit-build-unstable-verified-value: +1
          gerrit-build-unstable-codereview-value: 0
          projects:
            - project-compare-type: ANT
              project-pattern: '{project}'
              branches:
                - branch-compare-type: ANT
                  branch-pattern: '**/{branch}'
              file-paths:
                - compare-type: ANT
                  pattern: '{files}'

# Macro: integration-openstack-controller-mininet
# Operation: this macro will spin the controller and mininet vms
# Used by: {project}-csit-* job templates

- wrapper:
    name: integration-openstack-controller-mininet
    wrappers:
      - openstack:
          instances:
            - cloud-name: 'ODLRPC'
              template-name: '{controller-image}'
              count: '{controller-vms}'
            - cloud-name: 'ODLRPC'
              template-name: '{mininet-image}'
              count: '{mininet-vms}'

# Macro: integration-openstack-controller-devstack
# Operation: this macro will spin the controller and devstack vms
# Used by: {project}-csit-openstack job templates
- wrapper:
    name: integration-openstack-controller-devstack
    wrappers:
      - openstack:
          instances:
            - cloud-name: 'ODLRPC'
              template-name: '{controller-image}'
              count: '{controller-vms}'
            - cloud-name: 'ODLRPC'
              template-name: '{openstack-image}'
              count: '{openstack-vms}'

#################
# Shell Scripts #
#################

# Macro: integration-infra-stack
# Operation: Sets environment and then calls opendaylight-infra-stack to spin
#            up csit lab using openstack-heat.
# Used by: {project}-csit-* job templates

- builder:
    name: integration-infra-stack
    builders:
      - integration-cleanup-workspace
      - shell: |
          #!/bin/bash
          # Setup openstack envirnoment file for use by
          # the opendaylight-infra-stack macro
          cat > $WORKSPACE/opendaylight-infra-environment.yaml << EOF
          parameters:
              vm_0_count: {vm_0_count}
              vm_0_flavor: {vm_0_flavor}
              vm_0_image: {vm_0_image}
              vm_1_count: {vm_1_count}
              vm_1_flavor: {vm_1_flavor}
              vm_1_image: {vm_1_image}
          EOF
          echo "Contents of opendaylight-infra-environment.yaml ..."
          cat $WORKSPACE/opendaylight-infra-environment.yaml
      - opendaylight-infra-stack:
          stack-template: '{stack-template}'

# Macro: integration-infra-stack-3-type
# Operation: Sets environment and then calls opendaylight-infra-stack to spin
#            up csit lab using openstack-heat.
# Used by: {project}-csit-* job templates

- builder:
    name: integration-infra-stack-3-type
    builders:
      - integration-cleanup-workspace
      - shell: |
          #!/bin/bash
          # Setup openstack envirnoment file for use by
          # the opendaylight-infra-stack macro
          cat > $WORKSPACE/opendaylight-infra-environment.yaml << EOF
          parameters:
              vm_0_count: {vm_0_count}
              vm_0_flavor: {vm_0_flavor}
              vm_0_image: {vm_0_image}
              vm_1_count: {vm_1_count}
              vm_1_flavor: {vm_1_flavor}
              vm_1_image: {vm_1_image}
              vm_2_count: {vm_2_count}
              vm_2_flavor: {vm_2_flavor}
              vm_2_image: {vm_2_image}
          EOF
          echo "Contents of opendaylight-infra-environment.yaml ..."
          cat $WORKSPACE/opendaylight-infra-environment.yaml
      - opendaylight-infra-stack:
          stack-template: 'csit-3-instance-type.yaml'

# Macro: integration-get-slave-addresses
# Operation: this macro gets the IP addresses of the dynamic vms
# Used by: {project}-csit-* job templates

- builder:
    name: integration-get-slave-addresses
    builders:
      - shell: !include-raw: include-raw-integration-get-slave-addresses.sh

# Macro: integration-get-bundle-vars
# Operation: this macro gets all bundle related variables
# Used by: {project}-csit-3node-* job templates

- builder:
    name: integration-get-bundle-vars
    builders:
      - shell: !include-raw: include-raw-integration-get-bundle-vars.sh

# Macro: integration-distribution-check
# Operation: this macro deploys the controller with all fetures
# Used by: {project}-distribution-check-{stream} job template

- builder:
    name: integration-distribution-check
    builders:
      - shell: !include-raw: include-raw-integration-distribution-check.sh

# Macro: integration-deploy-controller-verify
# Operation: this macro deploys the controller with all fetures
# Used by: distribution-deploy-{stream} job template

- builder:
    name: integration-deploy-controller-verify
    builders:
      - shell: !include-raw: include-raw-integration-deploy-controller-verify.sh

# Macro: integration-deploy-controller-offline
# Operation: this macro deploys the controller with no external repo configuration
# Used by: integration-distrbution-offline-{stream} job template

- builder:
    name: integration-deploy-controller-offline
    builders:
      - shell: !include-raw: include-raw-integration-deploy-controller-offline.sh

# Macro: integration-deply-controller-run-test
# Operation: this macro deploys single contoller and runs test
# Used by: {project}-csit-1node-* job templates

- builder:
    name: integration-deploy-controller-run-test
    builders:
      - shell: !include-raw: include-raw-integration-deploy-controller-run-test.sh

# Macro: integration-configure-clustering
# Operation: this macro configures the clustering
# Used by: {project}-csit-3node-* job templates

- builder:
    name: integration-configure-clustering
    builders:
      - shell: !include-raw: include-raw-integration-configure-clustering.sh

# Macro: integration-start-cluster-run-test
# Operation: this macro starts the 3-node cluster and runs test
# Used by: {project}-csit-3node-* job templates

- builder:
    name: integration-start-cluster-run-test
    builders:
      - shell: !include-raw: include-raw-integration-start-cluster-run-test.sh

# Macro: integration-get-bundle-url
# Operation: this macro gets the job generated distribution URL from distribution pom.xml
# Used by: integration-patch-test-{stream} job template

- builder:
    name: integration-get-bundle-url
    builders:
      - inject:
          properties-content: BUNDLE_POM={bundle-pom}
      - shell: !include-raw-escape: include-raw-integration-get-bundle-url.sh
      - inject:
          properties-file: bundle.txt

# Macro: integration-install-robotframework
# Operation: Installs robotframework using pip to a virtualenv
# Used by: {project}-csit-* job templates

- builder:
    name: integration-install-robotframework
    builders:
      - shell: !include-raw: include-raw-integration-install-robotframework.sh

# Macro: integration-cleanup-tmp
# Operation: Cleans up temporary files created by build
# Used by: {project}-csit-* job templates

- builder:
    name: integration-cleanup-tmp
    builders:
      - shell: !include-raw: include-raw-integration-cleanup-tmp.sh

# Macro: integration-multipatch-builder
# Operation: checks out multiple patches and builds custom distribution
# Used by: integration-multipatch-test-* job templates

- builder:
    name: integration-multipatch-builder
    builders:
      - shell: !include-raw: include-raw-integration-multipatch-distribution-test.sh

# Macro: integration-cleanup-workspace
# Operation: Cleans up files possibly left there by the previous build
# Used by: {project}-csit-* job templates

- builder:
    name: integration-cleanup-workspace
    builders:
      - shell: !include-raw: include-raw-integration-cleanup-workspace.sh

# Macro: integration-rebase-patch
# Operation: For cloned project, rebase checked-out Gerrit patch onto $DISTROBRANCH.
# Used by: integration-patch-distribution-* job template

- builder:
    name: integration-rebase-gerrit-patch
    builders:
      - shell: !include-raw: include-raw-integration-rebase-gerrit-patch.sh

- builder:
    name: integration-deploy-openstack-run-test
    builders:
      - shell: !include-raw: include-raw-integration-deploy-openstack-run-test.sh

# Macro: integration-list-jobs
# Operation: queries Jenkins jobs from jenkins.opendaylight.org and
#   writes a list of the jobs corresponding to the search terms to a file.
# Used by: builder-merge job template
#
# This script requires the following JJB variables to be passed in:
#   {search_string}     Job type to act as a primary filter (e.g. csit)
#   {blacklist}         List of sub-projects to filter out (e.g. longevity)
#   {stream}            Development release name (e.g. boron)
#   {jobs-filename}     Filename to write list into (e.g. carbon-jobs.lst)
# NOTE: Requires xmlstarlet installed on node.

- builder:
    name: integration-list-jobs
    builders:
      - shell: !include-raw: include-raw-integration-list-jobs.sh

# Macro: integration-replace-block-text
# Operation: using starting and ending regex to
# replace a block of text in a file with the text in
# another file. Regex should be basic and work with sed
# Used by: builder-merge job template
#
# This script requires the following JJB variables to be passed in:
#   {starting-regex}
#   {ending-regex}
#   {file-with-changes-to-insert}
#   {file-to-change}

- builder:
    name: integration-replace-block-text
    builders:
      - shell: !include-raw: include-raw-integration-replace-block-text.sh

# Macro: integration-compare-distributions
# Operation: will compare an already created distribtion (probably last
# published to nexus) to the current distribution being created.
# The comparison is done to find the list of patches that are new to the
# current distribtion.
# Used by: builder-merge job template
#
# This script requires the bundle vars that are created by the
# get-bundle-vars macro script


- builder:
    name: integration-compare-distributions
    builders:
      - shell: !include-raw: include-raw-integration-compare-distributions.sh

##############
# Publishers #
##############

# Macro: integration-robot
# Operation: this macro publishes robot results
# Used by: {project}-csit-* job templates

- publisher:
    name: integration-robot
    publishers:
      - robot:
          output-path: ''
          other-files: ''
          unstable-threshold: '{unstable-if}'
          pass-threshold: '{pass-if}'
          only-critical: false

- publisher:
    name: integration-robot-tempest
    publishers:
      - robot:
          output-path: ''
          other-files:
            - tempest_results.html
          unstable-threshold: '{unstable-if}'
          pass-threshold: '{pass-if}'
          only-critical: false

- publisher:
    name: integration-csit-archive-build
    publishers:
      - postbuildscript:
          builders:
            - shell: |
                #!/bin/bash
                mkdir -p $WORKSPACE/archives
                curl --output robot-plugin.zip "$BUILD_URL/robot/report/*zip*/robot-plugin.zip"
                unzip -d $WORKSPACE/archives robot-plugin.zip
                mv *log* *.log *.log.gz *.csv *.png $WORKSPACE/archives || true  # Don't fail if file missing
          script-only-if-succeeded: 'False'
          script-only-if-failed: 'False'
          mark-unstable-if-failed: 'True'
