- job:
    block-downstream: false
    block-upstream: false
    builders:
    - shell: |-
        #!/bin/bash
        echo "Wait please - searching for information about jobs..."
        echo "            - searching for nextBuildNumber..."
        find $JENKINS_HOME/jobs -type f -name "nextBuildNumber" -print0 | xargs -0 sh -c 'for arg do cat "$arg"; dirname "$arg"; done' > nextBuildNumber
        echo "            - searching for lastUnsuccessfulBuild..."
        find $JENKINS_HOME/jobs -type l -name "lastUnsuccessfulBuild" -print0 | xargs -0 sh -c 'for arg do /bin/ls -al "$arg" | rev | cut -d">" -f1 | rev ; dirname "$(dirname "$arg")" ; done' > lastUnsuccessfulBuild
        echo "            - searching for lastSuccessfulBuild..."
        find $JENKINS_HOME/jobs -type l -name "lastSuccessfulBuild" -print0 | xargs -0 sh -c 'for arg do /bin/ls -al "$arg" | rev | cut -d">" -f1 | rev ; dirname "$(dirname "$arg")" ; done' > lastSuccessfulBuild
        echo "            - searching for lastStableBuild..."
        find $JENKINS_HOME/jobs -type l -name "lastStableBuild" -print0 | xargs -0 sh -c 'for arg do /bin/ls -al "$arg" | rev | cut -d">" -f1 | rev ; dirname "$(dirname "$arg")" ; done' > lastStableBuild
        echo "            - searching for lastUnstableBuild..."
        find $JENKINS_HOME/jobs -type l -name "lastUnstableBuild" -print0 | xargs -0 sh -c 'for arg do /bin/ls -al "$arg" | rev | cut -d">" -f1 | rev ; dirname "$(dirname "$arg")" ; done' > lastUnstableBuild
        echo "            - searching for lastFailedBuild..."
        find $JENKINS_HOME/jobs -type l -name "lastFailedBuild" -print0 | xargs -0 sh -c 'for arg do /bin/ls -al "$arg" | rev | cut -d">" -f1 | rev ; dirname "$(dirname "$arg")" ; done' > lastFailedBuild
        echo "            - searching for number of builds for every job..."
        find $JENKINS_HOME/jobs/ -maxdepth 3 -mindepth 3 -type d | cut -d"/" -f5 | uniq -c > numberOfBuilds

        echo "Find jobs with last ${CONSECUTIVEFAILURES} consecutive failures ..."
        #python - <<'FINDCONSECUTIVEFAILURES'
        python - <<FINDCONSECUTIVEFAILURES
        import sys
        import os
        import string
        import datetime
        import copy
        import operator

        #print(sys.argv[1])
        #minNumberOfConsecutiveFailures=int(sys.argv[1])
        minNumberOfConsecutiveFailures=int(${CONSECUTIVEFAILURES})

        with open("numberOfBuilds") as f:
        line=f.read()
        number_found=False
        position_of_delimiting_space=0
        for i in range(len(line)):
        if line[i] == " ":
        if not number_found:
        continue
        else:
        position_of_delimiting_space=i
        break
        else:
        number_found=True

        numberOfBuilds=dict()
        with open("numberOfBuilds") as f:
        for idx,j in enumerate(f):
        numberOfBuilds[j[1+position_of_delimiting_space:].replace('\n', '')]=int(j[:position_of_delimiting_space])

        jobs_statistics=['lastFailedBuild', 'lastSuccessfulBuild', 'lastUnsuccessfulBuild', 'lastStableBuild', 'lastUnstableBuild', 'nextBuildNumber']
        for idx,j in enumerate(jobs_statistics):
        build=dict()
        with open(j) as f:
        for idx,i in enumerate(f):
        if (idx % 2) == 0:
        buildNumber=int(i.replace('\n', ''))
        if (idx % 2) != 0:
        job=os.path.basename(i.replace('\n', ''))
        build[job]=buildNumber
        #print('*********************************')
        #print(j)
        #print('*********************************')
        #print(build)
        exec(j + " = copy.deepcopy(build)")
        #print('*********************************')
        #print(lastFailedBuild)
        #print('*********************************')
        #print(lastSuccessfulBuild)
        #print('*********************************')
        #print(lastUnsuccessfulBuild)
        #print('*********************************')
        #print(lastStableBuild)
        #print('*********************************')
        #print(lastUnstableBuild)
        #print('*********************************')
        #print(lastFailedBuild)

        build=dict()
        print("% 6s,% 6s,% 6s,% 6s,% 6s,% 6s" %('NextB', 'FailB', 'UnsucB', 'SuccB','UnstB','StablB'))
        for key in nextBuildNumber:
        print("% 6d,% 6d,% 6d,% 6d,% 6d,% 6d, % s" %(nextBuildNumber[key], lastFailedBuild[key], lastUnsuccessfulBuild[key], lastSuccessfulBuild[key], lastUnstableBuild[key], lastStableBuild[key], key))
        #if lastSuccessfulBuild[key] != lastStableBuild[key]:
        #  print(key)
        #if (lastFailedBuild[key] != lastUnsuccessfulBuild[key]):
        ##  print(key)
        #if (lastFailedBuild[key] > lastSuccessfulBuild[key]) and (lastSuccessfulBuild[key] != -1) and (lastFailedBuild[key] - lastSuccessfulBuild[key] > minNumberOfConsecutiveFailures):
        #print(key)
        #build[key]=lastFailedBuild[key] - lastSuccessfulBuild[key]
        if nextBuildNumber[key] == 1:
        continue
        else:
        if lastFailedBuild[key] == -1:
        if lastUnstableBuild[key] == -1:
        continue
        else:
        #print("unstable - if it is the need here can be collected similarly as failed")
        continue
        else:
        # RED POINT
        if (lastFailedBuild[key] > lastSuccessfulBuild[key]) and (lastFailedBuild[key] > lastStableBuild[key]) and (lastFailedBuild[key] > lastUnstableBuild[key]):
        cmp_with = max(lastSuccessfulBuild[key], lastStableBuild[key], lastUnstableBuild[key])
        if cmp_with == -1:
        cmp_with = 0
        if (lastFailedBuild[key] - cmp_with > minNumberOfConsecutiveFailures):
        build[key]=lastFailedBuild[key] - cmp_with
        #if key in numberOfBuilds:
        #  if build[key] > numberOfBuilds[key]:
        #    build[key] = numberOfBuilds[key]-1
        else:
        continue

        sorted_x = sorted(build.items(), key=operator.itemgetter(1), reverse=True)
        #print(sorted_x)
        print("#######################################################")
        for i in sorted_x:
        print(i[0])

        try:
        os.remove("JobsWithMoreConsecutiveFailures.html")
        except OSError:
        pass

        g = open("JobsWithMoreConsecutiveFailures.html", "a")
        for i in sorted_x:
        g.write("<a href=\"/job/" + i[0] + "\">" + i[0] + "</a>&nbsp;" + str(i[1]) + "<br/>")
        g.close()
        pass
        FINDCONSECUTIVEFAILURES
    concurrent: false
    disabled: false
    name: FindFailing.yaml
    node: master
    parameters:
    - string:
        default: '5'
        description: Number of consecutive failures
        name: CONSECUTIVEFAILURES
        trim: 'true'
    project-type: freestyle
    properties:
    - build-discarder:
        artifact-days-to-keep: -1
        artifact-num-to-keep: -1
        days-to-keep: -1
        num-to-keep: 1
    - raw:
        xml: |
          <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
          <maxConcurrentPerNode>0</maxConcurrentPerNode>
          <maxConcurrentTotal>0</maxConcurrentTotal>
          <categories class="java.util.concurrent.CopyOnWriteArrayList" />
          <throttleEnabled>false</throttleEnabled>
          <throttleOption>project</throttleOption>
          <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
          <paramsToUseForLimit />
          </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    publishers:
    - archive:
        allow-empty: false
        artifacts: JobsWithMoreConsecutiveFailures.html
        case-sensitive: true
        default-excludes: true
        fingerprint: false
        only-if-success: false
    triggers: []
    wrappers:
    - ansicolor:
        colormap: xterm
